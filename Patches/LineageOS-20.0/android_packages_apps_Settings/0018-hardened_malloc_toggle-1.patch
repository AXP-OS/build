From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date: Sun, 14 Aug 2022 17:34:03 +0300
Subject: [PATCH] add a per-app toggle to relax app hardening

---
 res/values/strings.xml                        |   4 +
 res/xml/app_info_settings.xml                 |   6 +
 .../appinfo/AppInfoDashboardFragment.java     |   5 +
 ...AppRelaxHardeningPreferenceController.java | 180 ++++++++++++++++++
 4 files changed, 195 insertions(+)
 create mode 100644 src/com/android/settings/applications/appinfo/AppRelaxHardeningPreferenceController.java

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 6e619cc2c4a..de0e7f59aba 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -14608,4 +14608,8 @@
 
     <string name="force_disable_supl_title">Force disable Secure User Plane Location (SUPL)</string>
     <string name="force_disable_supl_summary">Always disable SUPL assisted location support regardless of carrier configuration or emergency call status (does not disable control plane A-GNSS and DivestOS does not send IMSI to the SUPL)</string>
+
+    <string name="app_relax_hardening_title">Exploit protection compatibility mode</string>
+    <string name="app_relax_hardening_summary">Improve compatibility with misbehaving apps by using Android\'s standard address space size and memory allocator</string>
+    <string name="app_hardening_config">Configure hardening</string>
 </resources>
diff --git a/res/xml/app_info_settings.xml b/res/xml/app_info_settings.xml
index b155edc94e9..33fe411b035 100644
--- a/res/xml/app_info_settings.xml
+++ b/res/xml/app_info_settings.xml
@@ -153,6 +153,12 @@
         android:title="@string/advanced_apps"
         settings:controller="com.android.settings.applications.appinfo.AdvancedAppInfoPreferenceCategoryController">
 
+        <SwitchPreference
+            android:key="app_relax_hardening"
+            android:title="@string/app_relax_hardening_title"
+            android:summary="@string/app_relax_hardening_summary"
+            settings:controller="com.android.settings.applications.appinfo.AppRelaxHardeningPreferenceController" />
+
         <Preference
             android:key="system_alert_window"
             android:title="@string/draw_overlay"
diff --git a/src/com/android/settings/applications/appinfo/AppInfoDashboardFragment.java b/src/com/android/settings/applications/appinfo/AppInfoDashboardFragment.java
index e1e58513a76..397cd1fd83b 100755
--- a/src/com/android/settings/applications/appinfo/AppInfoDashboardFragment.java
+++ b/src/com/android/settings/applications/appinfo/AppInfoDashboardFragment.java
@@ -216,7 +216,12 @@ public class AppInfoDashboardFragment extends DashboardFragment
         alarmsAndReminders.setPackageName(packageName);
         alarmsAndReminders.setParentFragment(this);
 
+        final AppRelaxHardeningPreferenceController relaxHardening =
+                use(AppRelaxHardeningPreferenceController.class);
+        relaxHardening.setParentFragment(this);
+
         use(AdvancedAppInfoPreferenceCategoryController.class).setChildren(Arrays.asList(
+                relaxHardening,
                 writeSystemSettings, drawOverlay, pip, externalSource, acrossProfiles,
                 alarmsAndReminders));
 
diff --git a/src/com/android/settings/applications/appinfo/AppRelaxHardeningPreferenceController.java b/src/com/android/settings/applications/appinfo/AppRelaxHardeningPreferenceController.java
new file mode 100644
index 00000000000..20c12806041
--- /dev/null
+++ b/src/com/android/settings/applications/appinfo/AppRelaxHardeningPreferenceController.java
@@ -0,0 +1,180 @@
+/*
+ * Copyright (C) 2022 GrapheneOS
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.applications.appinfo;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.GosPackageState;
+import android.os.Bundle;
+import android.provider.Settings;
+
+import androidx.appcompat.app.AlertDialog;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceScreen;
+import androidx.preference.SwitchPreference;
+
+import com.android.settings.R;
+import com.android.settings.applications.AppInfoBase;
+import com.android.settings.applications.AppInfoWithHeader;
+import com.android.settingslib.applications.AppUtils;
+
+import dalvik.system.VMRuntime;
+
+public class AppRelaxHardeningPreferenceController extends AppInfoPreferenceControllerBase
+    implements Preference.OnPreferenceChangeListener {
+
+    private final boolean devMode;
+
+    public AppRelaxHardeningPreferenceController(Context ctx, String key) {
+        super(ctx, key);
+
+        devMode = Settings.Global.getInt(ctx.getContentResolver(),
+                Settings.Global.DEVELOPMENT_SETTINGS_ENABLED, 0) != 0;
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        if (!AppUtils.isAppInstalled(mAppEntry)) {
+            // not installed for the current user, App info page is still shown in Owner in this case
+            return CONDITIONALLY_UNAVAILABLE;
+        }
+
+        ApplicationInfo ai = mParent.getPackageInfo().applicationInfo;
+        return GosPackageState.eligibleForRelaxHardeningFlag(ai) ? AVAILABLE : CONDITIONALLY_UNAVAILABLE;
+    }
+
+    private boolean addedDevPreference;
+
+    @Override
+    public void updateState(Preference preference) {
+        super.updateState(preference);
+
+        final int flags = GosPackageState.FLAG_DISABLE_HARDENED_MALLOC | GosPackageState.FLAG_ENABLE_COMPAT_VA_39_BIT;
+
+        GosPackageState ps = GosPackageState.get(getPackageName());
+        boolean checked = ps != null && ps.hasFlags(flags);
+
+        ((SwitchPreference) preference).setChecked(checked);
+
+        if (!devMode || addedDevPreference || getAvailabilityStatus() != AVAILABLE) {
+            return;
+        }
+
+        Preference p = new Preference(preference.getContext());
+        p.setTitle(R.string.app_hardening_config);
+
+        p.setOnPreferenceClickListener(pref -> {
+            AppInfoBase.startAppInfoFragment(DevModeFragment.class,
+                    mContext.getString(R.string.app_hardening_config),
+                    getPackageName(), mParent.getPackageInfo().applicationInfo.uid,
+                    mParent, -1, mParent.getMetricsCategory());
+            return true;
+        });
+
+        p.setOrder(preference.getOrder() - 1);
+        preference.getParent().addPreference(p);
+
+        addedDevPreference = true;
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        boolean checked = (boolean) newValue;
+
+        GosPackageState.edit(getPackageName())
+                .setFlagsState(GosPackageState.FLAG_DISABLE_HARDENED_MALLOC
+                        | GosPackageState.FLAG_ENABLE_COMPAT_VA_39_BIT, checked)
+                .killUidAfterApply()
+                .apply();
+
+        return true;
+    }
+
+    private String getPackageName() {
+        return mParent.getPackageInfo().packageName;
+    }
+
+    public static class DevModeFragment extends AppInfoWithHeader {
+        private static final String KEY_FLAG = "flag";
+
+        @Override
+        public void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+
+            Context ctx = requireContext();
+            PreferenceScreen screen = getPreferenceManager().createPreferenceScreen(ctx);
+
+            String[] flags = { "DISABLE_HARDENED_MALLOC", "ENABLE_COMPAT_VA_39_BIT" };
+
+            for (String flag : flags) {
+                SwitchPreference p = new SwitchPreference(ctx);
+                p.setTitle(flag);
+
+                int psFlag;
+                try {
+                    psFlag = GosPackageState.class.getDeclaredField("FLAG_" + flag).getInt(null);
+                }  catch (ReflectiveOperationException e) {
+                    throw new RuntimeException(e);
+                }
+                p.getExtras().putInt(KEY_FLAG, psFlag);
+
+                p.setOnPreferenceChangeListener((preference, newValue) -> {
+                    boolean state = (boolean) newValue;
+
+                    GosPackageState.edit(mPackageName)
+                            .setFlagsState(psFlag, state)
+                            .killUidAfterApply()
+                            .apply();
+
+                    return true;
+                });
+
+                screen.addPreference(p);
+            }
+
+            setPreferenceScreen(screen);
+        }
+
+        @Override
+        protected boolean refreshUi() {
+            GosPackageState ps = GosPackageState.get(mPackageName);
+
+            PreferenceScreen s = getPreferenceScreen();
+            for (int i = 0, m = s.getPreferenceCount(); i < m; ++i) {
+                Preference p = s.getPreference(i);
+                if (!(p instanceof SwitchPreference)) {
+                    continue;
+                }
+                SwitchPreference sp = (SwitchPreference) p;
+                int psFlag = sp.getExtras().getInt(KEY_FLAG);
+                sp.setChecked(ps != null && ps.hasFlag(psFlag));
+            }
+
+            return true;
+        }
+
+        @Override
+        protected AlertDialog createDialog(int id, int errorCode) {
+            return null;
+        }
+
+        @Override
+        public int getMetricsCategory() {
+            return METRICS_CATEGORY_UNKNOWN;
+        }
+    }
+}
